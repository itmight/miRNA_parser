#!/usr/bin/python
import unittest
from StringIO import StringIO
from __init__ import *

N_GOOD_FILES = 3
# map filenames to sample input data

# expected dictionary from first file 
# 'bcgsc.ca__IlluminaGA_miRNASeq__TCGA-A6-2672-01A-01T-0827-13__mirna_quantification.txt'
FIRST_INPUT_D = {
  'hsa-let-7a-1': '2701.245803',
  'hsa-let-7a-2': '5383.052804',
  'hsa-let-7a-3': '2840.308',
  'hsa-let-7a-4': '0.0',
}

FILES = \
{
'bcgsc.ca__IlluminaGA_miRNASeq__TCGA-A6-2672-01A-01T-0827-13__mirna_quantification.txt':
"""barcode	miRNA_ID	read_count	reads_per_million_miRNA_mapped	cross-mapped
TCGA-A6-2672-01A-01T-0827-13	hsa-let-7a-1	3613.0	2701.245803	N
TCGA-A6-2672-01A-01T-0827-13	hsa-let-7a-2	7200.0	5383.052804	N
TCGA-A6-2672-01A-01T-0827-13	hsa-let-7a-3	3799.0	2840.308	N
TCGA-A6-2672-01A-01T-0827-13	hsa-let-7a-4	0.0	0.0	N
""",

'bcgsc.ca__IlluminaGA_miRNASeq__TCGA-A6-2674-01A-02T-0822-13__mirna_quantification.txt':
"""barcode	miRNA_ID	read_count	reads_per_million_miRNA_mapped	cross-mapped
TCGA-A6-2674-01A-02T-0822-13	hsa-let-7a-1	4370.0	2693.766243	N
TCGA-A6-2674-01A-02T-0822-13	hsa-let-7a-2	9017.0	5558.281513	Y
TCGA-A6-2674-01A-02T-0822-13	hsa-let-7a-3	4489.0	2767.120518	N
TCGA-A6-2674-01A-02T-0822-13	hsa-let-7a-4	0.0	0.0	N
""",

'bcgsc.ca__IlluminaGA_miRNASeq__TCGA-A6-2676-01A-01T-0827-13__mirna_quantification.txt':
"""barcode	miRNA_ID	read_count	reads_per_million_miRNA_mapped	cross-mapped
TCGA-A6-2676-01A-01T-0827-13	hsa-let-7a-1	4115.0	2421.620985	N
TCGA-A6-2676-01A-01T-0827-13	hsa-let-7a-3	4132.0	2431.625252	N
TCGA-A6-2676-01A-01T-0827-13	hsa-let-7a-4	0.0	0.0	N
""",

# Ignore this file, it's an isoform
'bcgsc.ca__IlluminaGA_miRNASeq__TCGA-A1-A0SE-01A-11R-A085-13__isoform_quantification.txt':
"""barcode	miRNA_ID	read_count	reads_per_million_miRNA_mapped	cross-mapped
TCGA-A6-2676-01A-01T-0827-13	hsa-let-7a-1	4115.0	2421.620985	N
TCGA-A6-2676-01A-01T-0827-13	hsa-let-7a-2	8049.0	4736.725957	N
TCGA-A6-2676-01A-01T-0827-13	hsa-let-7a-3	4132.0	2431.625252	N
TCGA-A6-2676-01A-01T-0827-13	hsa-let-7a-4	0.0	0.0	N
""",

# Ignore this file, it's not an miRNA datafile
'.DS_Garbage':
"""I am bad. Do not try to read me."""
}

# Expected tab-delimited matrix output with no header
OUTPUT = \
"""hsa-let-7a-1\t2701.245803\t2693.766243\t2421.620985
hsa-let-7a-2\t5383.052804\t5558.281513\t
hsa-let-7a-3\t2840.308\t2767.120518\t2431.625252
"""
# Headers to be generated by input of FILES
HEADER = \
"""miRNA_ID\tTCGA-A6-2672-01A-01T-0827-13\tTCGA-A6-2674-01A-02T-0822-13\tTCGA-A6-2676-01A-01T-0827-13
"""

MAPS = {'TCGA-A6-2672-01A-01T-0827-13': {'hsa-let-7a-4': '0.0', 'hsa-let-7a-2': '5383.052804', 'hsa-let-7a-3': '2840.308', 'hsa-let-7a-1': '2701.245803'}, 'TCGA-A6-2676-01A-01T-0827-13': {'hsa-let-7a-4': '0.0', 'hsa-let-7a-3': '2431.625252', 'hsa-let-7a-1': '2421.620985'}, 'TCGA-A6-2674-01A-02T-0822-13': {'hsa-let-7a-4': '0.0', 'hsa-let-7a-2': '5558.281513', 'hsa-let-7a-3': '2767.120518', 'hsa-let-7a-1': '2693.766243'}}


def fake_compile_directory():
  """Return dictionary of {str: {str: str}}, {sample_id: {variable: value}}
  """
  maps={}
  for filename, data in FILES.items():
    fp = StringIO(data)
    m = RX_DATAFILE.match(filename)
    if not m: continue
    sample_id = m.group(1)
    d = parse_file(fp, sample_id)
    maps[sample_id] = d
  return maps


class TestAtlasMIRNAParse(unittest.TestCase):

  def test_parse_bad_file(self):
    d = parse_file(StringIO(FILES['.DS_Garbage']))
    self.assertEqual(d, None)

  def test_good_file(self):
    s = FILES['bcgsc.ca__IlluminaGA_miRNASeq__TCGA-A6-2672-01A-01T-0827-13__mirna_quantification.txt']
    d = parse_file(StringIO(s))
    self.assertEqual(d, FIRST_INPUT_D)
    # Double check that the value returned is the reads_per_million
    #   because a bug related to this issue invalidated a study in the past.
    self.assertEqual(d['hsa-let-7a-1'], '2701.245803')
    self.assertNotEqual(d['hsa-let-7a-1'], '3613.0')

  def test_compile_directory(self):
    """We cannot test `compile_directory()` directly because it interacts with the os.
    Simulate it in "fake_compile_directory()" function. 
    """
    maps = fake_compile_directory()
    self.assertEqual(len(maps), N_GOOD_FILES)
    self.assertEqual(maps, MAPS)
    
  def test_print_matrix(self):
    out, err = StringIO(), StringIO()
    # Simulate compile_directory to generate map
    maps = fake_compile_directory()
    print_matrix(maps, out, err)
    self.assertEqual(out.getvalue(), OUTPUT)

  def test_print_matrix_header(self):
    out, err = StringIO(), StringIO()
    maps = fake_compile_directory()
    print_matrix(maps, out, err, print_header=True)
    header,c,data = out.getvalue().partition('\n')
    self.assertEqual(header+c,HEADER)
    self.assertEqual(data, OUTPUT)
  

    
if __name__ == "__main__":
  unittest.main()
